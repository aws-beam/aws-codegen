# WARNING: DO NOT EDIT, AUTO-GENERATED CODE!
# See https://github.com/aws-beam/aws-codegen for more details.

defmodule <%= context.module_name %> do
  @moduledoc """
<%= context.docstring %>
  """<%= for action <- context.actions do %>

  @doc """
<%= action.docstring %>
  """<%= if action.method == "GET" do %>
  def <%= action.function_name %>(client<%= AWS.CodeGen.RestService.function_parameters(action) %>, options \\ []) do
    path_ = "<%= AWS.CodeGen.RestService.Action.url_path(action) %>"
    headers = []<%= for parameter <- action.request_header_parameters do %>
    headers = if !is_nil(<%= parameter.code_name %>) do
      [{"<%= parameter.location_name %>", <%= parameter.code_name %>} | headers]
    else
      headers
    end<% end %>
    query_ = []<%= for parameter <- Enum.reverse(action.query_parameters) do %>
    query_ = if !is_nil(<%= parameter.code_name %>) do
      [{"<%= parameter.location_name %>", <%= parameter.code_name %>} | query_]
    else
      query_
    end<% end %><%= if length(action.response_header_parameters) > 0 do %>
    case request(client, :get, path_, query_, headers, nil, options, <%= inspect(action.success_status_code) %>) do
      {:ok, body, response} ->
        body =
          [<%= for parameter <- action.response_header_parameters do %>
            {"<%= parameter.location_name %>", "<%= parameter.name %>"},<% end %>
          ]
          |> Enum.reduce(body, fn {header_name, key}, acc ->
            case List.keyfind(response.headers, header_name, 0) do
              nil -> acc
              {_header_name, value} -> Map.put(acc, key, value)
            end
          end)

        {:ok, body, response}

      result ->
        result
    end<% else %>
    request(client, :get, path_, query_, headers, nil, options, <%= inspect(action.success_status_code) %>)<% end %>
  end<% else %>
  def <%= action.function_name %>(client<%= AWS.CodeGen.RestService.function_parameters(action) %>, input, options \\ []) do
    path_ = "<%= AWS.CodeGen.RestService.Action.url_path(action) %>"<%= if length(action.request_header_parameters) > 0 do %>
    {headers, input} =
      [<%= for parameter <- action.request_header_parameters do %>
        {"<%= parameter.name %>", "<%= parameter.location_name %>"},<% end %>
      ]
      |> AWS.Request.build_params(input)<% else %>
    headers = []<% end %><%= if length(action.query_parameters) > 0 do %>
    {query_, input} =
      [<%= for parameter <- action.query_parameters do %>
        {"<%= parameter.name %>", "<%= parameter.location_name %>"},<% end %>
      ]
      |> AWS.Request.build_params(input)<% else %>
    query_ = []<% end %><%= if length(action.response_header_parameters) > 0 do %>
    case request(client, <%= AWS.CodeGen.RestService.Action.method(action) %>, path_, query_, headers, input, options, <%= inspect(action.success_status_code) %>) do
      {:ok, body, response} ->
        body =
          [<%= for parameter <- action.response_header_parameters do %>
            {"<%= parameter.location_name %>", "<%= parameter.name %>"},<% end %>
          ]
          |> Enum.reduce(body, fn {header_name, key}, acc ->
            case List.keyfind(response.headers, header_name, 0) do
              nil -> acc
              {_header_name, value} -> Map.put(acc, key, value)
            end
          end)

        {:ok, body, response}

      result ->
        result
    end<% else %>
    request(client, <%= AWS.CodeGen.RestService.Action.method(action) %>, path_, query_, headers, input, options, <%= inspect(action.success_status_code) %>)<% end %>
  end<% end %><% end %>

  @spec request(AWS.Client.t(), binary(), binary(), list(), list(), map(), list(), pos_integer()) ::
          {:ok, Poison.Parser.t(), Poison.Response.t()}
          | {:error, Poison.Parser.t()}
          | {:error, HTTPoison.Error.t()}
  defp request(client, method, path, query, headers, input, options, success_status_code) do
    client = %{client | service: "<%= context.signing_name %>"<%= if context.is_global do %>,
                        region:  "<%= context.credential_scope %>"<% end %>}
    <%= if context.endpoint_prefix == "s3-control" do %>account_id = :proplists.get_value("x-amz-account-id", headers)
    host = build_host(account_id, "<%= context.endpoint_prefix %>", client)<% else %>host = build_host("<%= context.endpoint_prefix %>", client)<% end %>
    url = host
    |> build_url(path, client)
    |> add_query(query)

    additional_headers = [{"Host", host}, {"Content-Type", "<%= context.content_type %>"}]
    headers = AWS.Request.add_headers(additional_headers, headers)

    payload = encode_payload(input)
    headers = AWS.Request.sign_v4(client, method, url, headers, payload)
    perform_request(method, url, payload, headers, options, success_status_code)
  end

  defp perform_request(method, url, payload, headers, options, nil) do
    case HTTPoison.request(method, url, payload, headers, options) do
      {:ok, %HTTPoison.Response{status_code: 200, body: ""} = response} ->
        {:ok, response}

      {:ok, %HTTPoison.Response{status_code: status_code, body: body} = response}
      when status_code == 200 or status_code == 202 or status_code == 204 ->
        {:ok, <%= context.decode %>, response}

      {:ok, %HTTPoison.Response{body: body}} ->
        error = <%= context.decode %>
        {:error, error}

      {:error, %HTTPoison.Error{reason: reason}} ->
        {:error, %HTTPoison.Error{reason: reason}}
    end
  end

  defp perform_request(method, url, payload, headers, options, success_status_code) do
    case HTTPoison.request(method, url, payload, headers, options) do
      {:ok, %HTTPoison.Response{status_code: ^success_status_code, body: ""} = response} ->
        {:ok, %{}, response}

      {:ok, %HTTPoison.Response{status_code: ^success_status_code, body: body} = response} ->
        {:ok, <%= context.decode %>, response}

      {:ok, %HTTPoison.Response{body: body}} ->
        error = <%= context.decode %>
        {:error, error}

      {:error, %HTTPoison.Error{reason: reason}} ->
        {:error, %HTTPoison.Error{reason: reason}}
    end
  end

  defp build_host(_endpoint_prefix, %{host: host}) when is_binary(host) do
    host
  end
<%= if context.endpoint_prefix == "s3-control" do %>
  defp build_host(_account_id, _endpoint_prefix, %{region: "local", endpoint: endpoint}) do
    endpoint
  end
  defp build_host(_account_id, _endpoint_prefix, %{region: "local"}) do
    "localhost"
  end
  defp build_host(:undefined, _endpoint_prefix, _client) do
    raise "missing account_id"
  end
  defp build_host(account_id, endpoint_prefix, %{region: region, endpoint: endpoint}) do
    "#{account_id}.#{endpoint_prefix}.#{region}.#{endpoint}"
  end
<% else %>
  defp build_host(_endpoint_prefix, %{region: "local", endpoint: endpoint}) do
    endpoint
  end
  defp build_host(_endpoint_prefix, %{region: "local"}) do
    "localhost"
  end<%= if context.is_global do %>
  defp build_host(endpoint_prefix, %{endpoint: endpoint}) do
    "#{endpoint_prefix}.#{endpoint}"
  end
<% else %>
  defp build_host(endpoint_prefix, %{region: region, endpoint: endpoint}) do
    "#{endpoint_prefix}.#{region}.#{endpoint}"
  end
<% end %><% end %>
  defp build_url(host, path, %{:proto => proto, :port => port}) do
    "#{proto}://#{host}:#{port}#{path}"
  end

  defp add_query(url, []) do
    url
  end
  defp add_query(url, query) do
    querystring = AWS.Util.encode_query(query)
    "#{url}?#{querystring}"
  end

  defp encode_payload(input) do
    if input != nil, do: <%= context.encode %>, else: ""
  end
end
