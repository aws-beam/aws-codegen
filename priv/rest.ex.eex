# WARNING: DO NOT EDIT, AUTO-GENERATED CODE!
# See https://github.com/aws-beam/aws-codegen for more details.

defmodule <%= context.module_name %> do
  <%= if String.trim(context.docstring) != "" do %>
  @moduledoc """
<%= context.docstring %>
  """
  <% end %>

  alias AWS.Client
  alias AWS.Request

<% types = AWS.CodeGen.Types.types(context) %>

<%= for {type_name, type_fields} <- types do %>
@typedoc """

## Example:
    <%= if Enum.empty?(type_fields) do %>
    <%= type_name %>() :: %{}
    <% else %>
    <%= type_name %>() :: %{
      <%= AWS.CodeGen.ElixirHelpers.render_type_fields(type_name, type_fields, 6) %>
    }
    <% end %>
"""
@type <%= if Enum.empty?(type_fields) do "#{type_name}() :: %{}" else "#{type_name}() :: %{String.t => any()}" end %>
<% end %>

<%= Enum.map(context.actions,
             fn action ->
                errors = action.errors
                if not is_nil(errors) do
                    errors_snakecased = errors |> Enum.map(fn error -> AWS.CodeGen.Name.to_snake_case(String.replace(error["target"], ~r/com\.amazonaws\.[^#]+#/, "")) end)
                    all_types = AWS.CodeGen.Types.types(context)
                    error_types = Enum.reduce(all_types,
                                             [],
                                             fn {type_name, _type_fields}, acc ->
                                               if Enum.member?(errors_snakecased, type_name) do
                                                 ["#{type_name}()" | acc]
                                               else
                                                 acc
                                               end
                                              end
                                            )
                   "@type #{action.function_name}_errors() :: #{Enum.join(error_types, " | ")}"
                end
             end)
    |> Enum.reject(&is_nil/1)
    |> Enum.join("\n\n")
%>

  def metadata do
    %{
      api_version: <%= inspect(context.api_version) %>,
      content_type: <%= inspect(context.content_type) %>,
      credential_scope: <%= inspect(context.credential_scope) %>,
      endpoint_prefix: <%= inspect(context.endpoint_prefix) %>,
      global?: <%= inspect(context.is_global) %>,
      hostname: <%= inspect(context.hostname) %>,
      protocol: <%= inspect(context.protocol) %>,
      service_id: <%= inspect(context.service_id) %>,
      signature_version: <%= inspect(context.signature_version) %>,
      signing_name: <%= inspect(context.signing_name) %>,
      target_prefix: <%= inspect(context.target_prefix) %>
    }
  end<%= for action <- context.actions do %>

<%= if action.method == "GET" do %>
  <%= AWS.CodeGen.ElixirHelpers.render_docstring(action, context, types) %>
  <%= AWS.CodeGen.ElixirHelpers.render_spec(:get, context, action) %>
  <%= AWS.CodeGen.ElixirHelpers.render_def(context, action) %> do
    url_path = "<%= if context.module_name == "AWS.ApiGatewayManagementApi" do %>/#{stage}<% end %><%= AWS.CodeGen.RestService.Action.url_path(action) %>"

    <%= AWS.CodeGen.ElixirHelpers.define_and_validate_optionals(action) %>

    # Required headers
    headers = [<%= action.required_request_header_parameters |> Enum.map(fn parameter -> ~s|{"#{parameter.location_name}", #{parameter.code_name}}| end) |> Enum.join(",") %>]

    # Optional headers<%= for parameter <- Enum.reverse(action.optional_request_header_parameters) do %>
    headers = if opt_val = Keyword.get(options, :<%= parameter.code_name %>) do
      [{"<%= parameter.location_name %>", opt_val} | headers]
    else
      headers
    end<% end %>

    # Required query params
    query_params = [<%= action.required_query_parameters |> Enum.map(fn parameter -> ~s|{"#{parameter.location_name}", #{parameter.code_name}}| end) |> Enum.join(",") %>]

    # Optional query params<%= for parameter <- Enum.reverse(action.optional_query_parameters) do %>
    query_params = if opt_val = Keyword.get(options, :<%= parameter.code_name %>) do
      [{"<%= parameter.location_name %>", opt_val} | query_params]
    else
      query_params
    end<% end %><%= if length(action.response_header_parameters) > 0 do %>
    options = Keyword.put(
      options,
      :response_header_parameters,
      <%= inspect((for param <- action.response_header_parameters, do: {param.location_name, param.name}), pretty: true) %>
    )<% end %>

    <%= if action.send_body_as_binary? do %>
      options = Keyword.put(
        options,
        :send_body_as_binary?,
        true
      )
    <% end %>

    <%= if action.receive_body_as_binary? do %>
      options = Keyword.put(
        options,
        :receive_body_as_binary?,
        true
      )
    <% end %>

    meta =
      <%= if action.host_prefix do %>
        metadata() |> Map.put_new(:host_prefix, <%= inspect(action.host_prefix) %>)
      <% else %>
        metadata()
      <% end %>

    <%= AWS.CodeGen.ElixirHelpers.drop_optionals(action) %>

    Request.request_rest(client, meta, :get, url_path, query_params, headers, nil, options, <%= inspect(action.success_status_code) %>)<%
else %>

  <%= AWS.CodeGen.ElixirHelpers.render_docstring(action, context, types) %>
  <%= AWS.CodeGen.ElixirHelpers.render_spec(:other, context, action) %>
  <%= AWS.CodeGen.ElixirHelpers.render_def(context, action) %> do
    url_path = "<%= if context.module_name == ~s(AWS.ApiGatewayManagementApi) do %>/#{stage}<% end %><%= AWS.CodeGen.RestService.Action.url_path(action) %>"

    <%= AWS.CodeGen.ElixirHelpers.define_and_validate_optionals(action) %>

    # Required headers
    headers = [<%= action.required_request_header_parameters |> Enum.map(fn parameter -> ~s|{"#{parameter.location_name}", #{parameter.code_name}}| end) |> Enum.join(",") %>]

    # Optional headers<%= for parameter <- Enum.reverse(action.optional_request_header_parameters) do %>
    headers = if opt_val = Keyword.get(options, :<%= parameter.code_name %>) do
      [{"<%= parameter.location_name %>", opt_val} | headers]
    else
      headers
    end<% end %>

    # Required query params
    query_params = [<%= action.required_query_parameters |> Enum.map(fn parameter -> ~s|{"#{parameter.location_name}", #{parameter.code_name}}| end) |> Enum.join(",") %>]

    # Optional query params<%= for parameter <- Enum.reverse(action.optional_query_parameters) do %>
    query_params = if opt_val = Keyword.get(options, :<%= parameter.code_name %>) do
      [{"<%= parameter.location_name %>", opt_val} | query_params]
    else
      query_params
    end<% end %><%= if length(action.response_header_parameters) > 0 do %>
    options = Keyword.put(
      options,
      :response_header_parameters,
      <%= inspect((for param <- action.response_header_parameters, do: {param.location_name, param.name}), pretty: true) %>
    )<% end %>

    <%= if action.send_body_as_binary? do %>
      options = Keyword.put(
        options,
        :send_body_as_binary?,
        true
      )
    <% end %>

    <%= if action.receive_body_as_binary? do %>
      options = Keyword.put(
        options,
        :receive_body_as_binary?,
        true
      )
    <% end %>

    <%= if Enum.member?(["put_bucket_cors", "put_bucket_lifecycle", "put_bucket_tagging", "delete_objects"], action.function_name) do %>
      options = Keyword.put(
        options,
        :append_sha256_content_hash,
        true
      )
    <% end %>

    meta =
      <%= if action.host_prefix do %>
        metadata() |> Map.put_new(:host_prefix, <%= inspect(action.host_prefix) %>)
      <% else %>
        metadata()
      <% end %>

    <%= AWS.CodeGen.ElixirHelpers.drop_optionals(action) %>

    body = <%= if action.has_body? do %>input<% else %>nil<% end %>

    Request.request_rest(client, meta, <%= AWS.CodeGen.RestService.Action.method(action) %>, url_path, query_params, headers, body, options, <%= inspect(action.success_status_code) %>)<% end %>
  end<% end %>
end
