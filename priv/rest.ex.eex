# WARNING: DO NOT EDIT, AUTO-GENERATED CODE!
# See https://github.com/aws-beam/aws-codegen for more details.

defmodule <%= context.module_name %> do
  <%= if String.trim(context.docstring) != "" do %>
  @moduledoc """
<%= context.docstring %>
  """
  <% end %>

  alias AWS.Client
  alias AWS.Request

  def metadata do
    %AWS.ServiceMetadata{
      abbreviation: <%= inspect(context.abbreviation) %>,
      api_version: <%= inspect(context.api_version) %>,
      content_type: <%= inspect(context.content_type) %>,
      credential_scope: <%= inspect(context.credential_scope) %>,
      endpoint_prefix: <%= inspect(context.endpoint_prefix) %>,
      global?: <%= inspect(context.is_global) %>,
      protocol: <%= inspect(context.protocol) %>,
      service_id: <%= inspect(context.service_id) %>,
      signature_version: <%= inspect(context.signature_version) %>,
      signing_name: <%= inspect(context.signing_name) %>,
      target_prefix: <%= inspect(context.target_prefix) %>
    }
  end<%= for action <- context.actions do %>

  <%= if String.trim(action.docstring) != "" do %>
  @doc """
<%= action.docstring %>
  """<% end %><%= if action.method == "GET" do %>
  def <%= action.function_name %>(%Client{} = client<%= AWS.CodeGen.RestService.function_parameters(action) %>, options \\ []) do
    url_path = "<%= AWS.CodeGen.RestService.Action.url_path(action) %>"
    headers = []<%= for parameter <- action.request_header_parameters do %>
    headers = if !is_nil(<%= parameter.code_name %>) do
      [{"<%= parameter.location_name %>", <%= parameter.code_name %>} | headers]
    else
      headers
    end<% end %>
    query_params = []<%= for parameter <- Enum.reverse(action.query_parameters) do %>
    query_params = if !is_nil(<%= parameter.code_name %>) do
      [{"<%= parameter.location_name %>", <%= parameter.code_name %>} | query_params]
    else
      query_params
    end<% end %><%= if length(action.response_header_parameters) > 0 do %>
    options = Keyword.put(
      options,
      :response_header_parameters,
      <%= inspect((for param <- action.response_header_parameters, do: {param.location_name, param.name}), pretty: true) %>
    )<% end %>

    Request.request_rest(client, metadata(), :get, url_path, query_params, headers, nil, options, <%= inspect(action.success_status_code) %>)<% else %>
  def <%= action.function_name %>(%Client{} = client<%= AWS.CodeGen.RestService.function_parameters(action) %>, input, options \\ []) do
    url_path = "<%= AWS.CodeGen.RestService.Action.url_path(action) %>"<%= if length(action.request_header_parameters) > 0 do %>
    {headers, input} =
      [<%= for parameter <- action.request_header_parameters do %>
        {"<%= parameter.name %>", "<%= parameter.location_name %>"},<% end %>
      ]
      |> Request.build_params(input)<% else %>
    headers = []<% end %><%= if length(action.query_parameters) > 0 do %>
    {query_params, input} =
      [<%= for parameter <- action.query_parameters do %>
        {"<%= parameter.name %>", "<%= parameter.location_name %>"},<% end %>
      ]
      |> Request.build_params(input)<% else %>
    query_params = []<% end %><%= if length(action.response_header_parameters) > 0 do %>
    options = Keyword.put(
      options,
      :response_header_parameters,
      <%= inspect((for param <- action.response_header_parameters, do: {param.location_name, param.name}), pretty: true) %>
    )<% end %>

    <%= if action.send_body_as_binary? do %>
      options = Keyword.put(
        options,
        :send_body_as_binary?,
        true
      )
    <% end %>

    Request.request_rest(client, metadata(), <%= AWS.CodeGen.RestService.Action.method(action) %>, url_path, query_params, headers, input, options, <%= inspect(action.success_status_code) %>)<% end %>
  end<% end %>
end
