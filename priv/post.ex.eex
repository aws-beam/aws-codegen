# WARNING: DO NOT EDIT, AUTO-GENERATED CODE!
# See https://github.com/aws-beam/aws-codegen for more details.

defmodule <%= context.module_name %> do
  <%= if String.trim(context.docstring) != "" do %>
  @moduledoc """
<%= context.docstring %>
  """
  <% end %>

  alias AWS.Client
  alias AWS.Request

 <%= for {type_name, type_fields} <- AWS.CodeGen.Util.types(context) do %>
@typedoc """

## Example:
<%= type_name %>() :: %{
<%= Enum.map_join(type_fields, ",\n", fn {field_name, field_type} ->
  ~s{  #{field_name} => #{field_type}}
end) %>
}
"""
@type <%= "#{type_name}()" %> :: %{String.t => any()}
<% end %>

  def metadata do
    %{
      api_version: <%= inspect(context.api_version) %>,
      content_type: <%= inspect(context.content_type) %>,
      credential_scope: <%= inspect(context.credential_scope) %>,
      endpoint_prefix: <%= inspect(context.endpoint_prefix) %>,
      global?: <%= inspect(context.is_global) %>,
      protocol: <%= inspect(context.protocol) %>,
      service_id: <%= inspect(context.service_id) %>,
      signature_version: <%= inspect(context.signature_version) %>,
      signing_name: <%= inspect(context.signing_name) %>,
      target_prefix: <%= inspect(context.target_prefix) %>
    }
  end
<%= for action <- context.actions do %>
  <%= if String.trim(action.docstring) != "" do %>
  @doc """
<%= action.docstring %>
  """<% end %>
  @spec <%= action.function_name %>(map(), <%= AWS.CodeGen.Util.function_argument_type(action)%>, list()) :: <%= AWS.CodeGen.Util.return_type(action)%>
  def <%= action.function_name %>(%Client{} = client, input, options \\ []) do
    meta =
      <%= if action.host_prefix do %>
        metadata() |> Map.put_new(:host_prefix, <%= inspect(action.host_prefix) %>)
      <% else %>
        metadata()
      <% end %>

    Request.request_post(client, meta, "<%= action.name %>", input, options)
  end
<% end %>
end
