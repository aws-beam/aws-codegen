# WARNING: DO NOT EDIT, AUTO-GENERATED CODE!
# See https://github.com/aws-beam/aws-codegen for more details.

defmodule <%= context.module_name %> do
  <%= if String.trim(context.docstring) != "" do %>
  @moduledoc """
<%= context.docstring %>
  """
  <% end%>

  alias AWS.Client
  alias AWS.Request

  def metadata do
    %AWS.ServiceMetadata{
      abbreviation: <%= inspect(context.abbreviation) %>,
      api_version: <%= inspect(context.api_version) %>,
      content_type: <%= inspect(context.content_type) %>,
      credential_scope: <%= inspect(context.credential_scope) %>,
      endpoint_prefix: <%= inspect(context.endpoint_prefix) %>,
      global?: <%= inspect(context.is_global) %>,
      protocol: <%= inspect(context.protocol) %>,
      service_id: <%= inspect(context.service_id) %>,
      signature_version: <%= inspect(context.signature_version) %>,
      signing_name: <%= inspect(context.signing_name) %>,
      target_prefix: <%= inspect(context.target_prefix) %>
    }
  end
<%= for action <- context.actions do %>
  <%= if String.trim(action.docstring) != "" do %>
  @doc """
<%= action.docstring %>
  """<% end %>
  def <%= action.function_name %>(%Client{} = client, input, options \\ []) do
    Request.request_post(client, metadata(), "<%= action.name %>", input, options)
  end
<% end %>

  <%=  for {_name, shape} <- context.shapes do %>
    <%=  if shape.type == "structure" do %>
    defmodule <%= shape.name %> do
      defstruct [
        <%= for {name, %{"shape" => _shape}} <- shape.members do %>
        :<%= AWS.CodeGen.Name.to_snake_case(name) %>,
        <% end %>
      ]

      @type t :: %__MODULE__{
        <%= for {name, %{"shape" => shape}} <- shape.members do %>
        <%= AWS.CodeGen.Name.to_snake_case(name) %>: <%= AWS.CodeGen.Types.shape_to_type(shape, context.module_name, context.shapes) %>,
        <% end %>
      }
    end
    <%  end %>

  <%  end %>

end
