# WARNING: DO NOT EDIT, AUTO-GENERATED CODE!
# See https://github.com/aws-beam/aws-codegen for more details.

defmodule <%= context.module_name %> do
  @moduledoc """
<%= context.docstring %>
  """
<%= for action <- context.actions do %>
  @doc """
<%= action.docstring %>
  """
  def <%= action.function_name %>(client, input, options \\ []) do
    request(client, "<%= action.name %>", input, options)
  end
<% end %>
  @spec request(AWS.Client.t(), binary(), map(), list()) ::
          {:ok, Poison.Parser.t() | nil, Poison.Response.t()}
          | {:error, Poison.Parser.t()}
          | {:error, HTTPoison.Error.t()}
  defp request(client, action, input, options) do
    client = %{client | service: "<%= context.signing_name %>"<%= if context.is_global do %>,
                        region:  "<%= context.credential_scope %>"<% end %>}
    host = build_host("<%= context.endpoint_prefix %>", client)
    url = build_url(host, client)

    headers = [
      {"Host", host},
      {"Content-Type", "<%= context.content_type %>"}<%= if context.protocol == "json" do %>,
      {"X-Amz-Target", "<%= context.target_prefix %>.#{action}"}<% end %>
    ]
<%= if context.protocol == "query" do %>
    input = Map.merge(input, %{"Action" => action, "Version" => "<%= context.api_version %>"})<% end %>
    payload = <%= context.encode %>
    headers = AWS.Request.sign_v4(client, "POST", url, headers, payload)

    case HTTPoison.post(url, payload, headers, options) do
      {:ok, %HTTPoison.Response{status_code: 200, body: ""} = response} ->
        {:ok, nil, response}

      {:ok, %HTTPoison.Response{status_code: 200, body: body} = response} ->
        {:ok, <%= context.decode %>, response}

      {:ok, %HTTPoison.Response{body: body}} ->
        error = <%= context.decode %>
        {:error, error}

      {:error, %HTTPoison.Error{reason: reason}} ->
        {:error, %HTTPoison.Error{reason: reason}}
    end
  end

  defp build_host(_endpoint_prefix, %{region: "local", endpoint: endpoint}) do
    endpoint
  end
  defp build_host(_endpoint_prefix, %{host: host}) when is_binary(host) do
    host
  end
  defp build_host(_endpoint_prefix, %{region: "local"}) do
    "localhost"
  end<%= if context.is_global do %>
  defp build_host(endpoint_prefix, %{endpoint: endpoint}) do
    "#{endpoint_prefix}.#{endpoint}"
  end
<% else %>
  defp build_host(endpoint_prefix, %{region: region, endpoint: endpoint}) do
    "#{endpoint_prefix}.#{region}.#{endpoint}"
  end
<% end %>
  defp build_url(host, %{:proto => proto, :port => port}) do
    "#{proto}://#{host}:#{port}/"
  end
end
