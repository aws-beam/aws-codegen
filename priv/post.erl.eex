%% WARNING: DO NOT EDIT, AUTO-GENERATED CODE!
%% See https://github.com/aws-beam/aws-codegen for more details.

<%= if context.docstring != "%% @doc" do %><%= context.docstring %><% end %>
-module(<%= context.module_name %>).

-export([<%= Enum.map(context.actions, fn(action) -> ["#{action.function_name}/#{action.arity - 1}", "#{action.function_name}/#{action.arity}"] end) |> List.flatten |> Enum.join(",\n         ") %>]).

-include_lib("hackney/include/hackney_lib.hrl").

<%= for {type_name, type_fields} <- AWS.CodeGen.Util.types(context) do %>
%% Example:
%% <%= type_name %>() :: #{
<%= Enum.map_join(type_fields, ",\n", fn {field_name, field_type} ->
  ~s{%%   #{field_name}#{field_type}}
end) %>
%% }
-type <%= "#{type_name}()" %> :: #{binary() => any()}.
<% end %>

%%====================================================================
%% API
%%====================================================================
<%= for action <- context.actions do %>
<%= action.docstring %>
-spec <%= action.function_name %>(map(), <%= AWS.CodeGen.Util.function_argument_type(context.language, action)%>) ->
    <%= AWS.CodeGen.Util.return_type(context.language, action)%>.
<%= action.function_name %>(Client, Input)
  when is_map(Client), is_map(Input) ->
    <%= action.function_name %>(Client, Input, []).

-spec <%= action.function_name %>(map(), <%= AWS.CodeGen.Util.function_argument_type(context.language, action)%>, proplists:proplist()) ->
    <%= AWS.CodeGen.Util.return_type(context.language, action)%>.
<%= action.function_name %>(Client, Input, Options)
  when is_map(Client), is_map(Input), is_list(Options) ->
    request(Client, <<"<%= action.name %>">>, Input, Options).
<% end %>
%%====================================================================
%% Internal functions
%%====================================================================

-spec request(aws_client:aws_client(), binary(), map(), list()) ->
    {ok, Result, {integer(), list(), hackney:client()}} |
    {error, Error, {integer(), list(), hackney:client()}} |
    {error, term()} when
    Result :: map() | undefined,
    Error :: map().
request(Client, Action, Input, Options) ->
    RequestFun = fun() -> do_request(Client, Action, Input, Options) end,
    aws_request:request(RequestFun, Options).

<%= if context.protocol == "ec2" do %>do_request(Client, _Action, Input0, Options) ->
<% else %>do_request(Client, Action, Input0, Options) ->
<% end %>    Client1 = Client#{service => <<"<%= context.signing_name %>">><%= if context.is_global do %>,
                      region => <<"<%= context.credential_scope %>">><% end %>},
    Host = build_host(<<"<%= context.endpoint_prefix %>">>, Client1),
    URL = build_url(Host, Client1),
    Headers = [
        {<<"Host">>, Host},
        {<<"Content-Type">>, <<"<%= context.content_type %>">>}<%= if context.protocol == "json" do %>,
        {<<"X-Amz-Target">>, <<"<%= context.target_prefix %>.", Action/binary>>}<% end %>
    ],
<%= if context.protocol == "query" do %>
    Input = Input0#{ <<"Action">> => Action
                   , <<"Version">> => <<"<%= context.api_version %>">>
                   },
<% else %>
    Input = Input0,
<% end %>
    Payload = <%= context.encode %>,
    SignedHeaders = aws_request:sign_request(Client1, <<"POST">>, URL, Headers, Payload),
    Response = hackney:request(post, URL, SignedHeaders, Payload, Options),
    handle_response(Response).

handle_response({ok, 200, ResponseHeaders, Client}) ->
    case hackney:body(Client) of
        {ok, <<>>} ->
            {ok, undefined, {200, ResponseHeaders, Client}};
        {ok, Body} ->
            Result = <%= context.decode %>,
            {ok, Result, {200, ResponseHeaders, Client}}
    end;
handle_response({ok, StatusCode, ResponseHeaders, Client}) ->
    {ok, Body} = hackney:body(Client),
    Error = <%= context.decode %>,
    {error, Error, {StatusCode, ResponseHeaders, Client}};
handle_response({error, Reason}) ->
    {error, Reason}.

build_host(_EndpointPrefix, #{region := <<"local">>, endpoint := Endpoint}) ->
    Endpoint;
build_host(_EndpointPrefix, #{region := <<"local">>}) ->
    <<"localhost">>;<%= if context.is_global do %>
build_host(EndpointPrefix, #{endpoint := Endpoint}) ->
    aws_util:binary_join([EndpointPrefix, Endpoint], <<".">>).
<% else %>
build_host(EndpointPrefix, #{region := Region, endpoint := Endpoint}) ->
    aws_util:binary_join([EndpointPrefix, Region, Endpoint], <<".">>).
<% end %>
build_url(Host, Client) ->
    Proto = aws_client:proto(Client),
    Port = aws_client:port(Client),
    aws_util:binary_join([Proto, <<"://">>, Host, <<":">>, Port, <<"/">>], <<"">>).
