%% WARNING: DO NOT EDIT, AUTO-GENERATED CODE!
%% See https://github.com/aws-beam/aws-codegen for more details.

<%= if context.docstring != "%% @doc" do %><%= context.docstring %><% end %>
-module(<%= context.module_name %>).
<%= if context.module_name == "aws_apigatewaymanagementapi" do %>
-export([<%= Enum.map(context.actions, fn(action) -> if action.method == "GET" do ["#{action.function_name}/#{action.arity - 1}"] else [] end ++ ["#{action.function_name}/#{action.arity + 1}", "#{action.function_name}/#{action.arity + 2}"] end) |> List.flatten |> Enum.join(",\n         ") %>]).
<% else %>
-export([<%= Enum.map(context.actions, fn(action) -> if action.method == "GET" do ["#{action.function_name}/#{action.arity - 3}"] else [] end ++ ["#{action.function_name}/#{action.arity - 1}", "#{action.function_name}/#{action.arity}"] end) |> List.flatten |> Enum.join(",\n         ") %>]).
<% end %>
-include_lib("hackney/include/hackney_lib.hrl").

<%= for {type_name, type_fields} <- AWS.CodeGen.Types.types(context) do %>
<%= if Enum.empty?(type_fields) do %>%% Example:
%% <%= type_name %>() :: #{}
-type <%= "#{type_name}()" %> :: #{}.<% else %>
%% Example:
%% <%= type_name %>() :: #{
<%= Enum.map_join(type_fields, ",\n", fn {field_name, field_type} ->
  ~s{%%   #{field_name}#{field_type}}
end) %>
%% }
-type <%= "#{type_name}()" %> :: #{binary() => any()}.<% end %>
<% end %>
<%= Enum.map(context.actions,
             fn action ->
                errors = action.errors
                if not is_nil(errors) do
                    errors_snakecased = errors |> Enum.map(fn error -> AWS.CodeGen.Name.to_snake_case(String.replace(error["target"], ~r/com\.amazonaws\.[^#]+#/, "")) end)
                    all_types = AWS.CodeGen.Types.types(context)
                    error_types = Enum.reduce(all_types,
                                             [],
                                             fn {type_name, _type_fields}, acc ->
                                               if Enum.member?(errors_snakecased, type_name) do
                                                 ["#{type_name}()" | acc]
                                               else
                                                 acc
                                               end
                                              end
                                            )
                   "-type #{action.function_name}_errors() ::\n    #{Enum.join(error_types, " | \n    ")}."
                end
             end)
    |> Enum.reject(&is_nil/1)
    |> Enum.join("\n\n")
%>

%%====================================================================
%% API
%%====================================================================
<%= for action <- context.actions do %>
<%= action.docstring %><%= if action.method == "GET" do %>
-spec <%= action.function_name %>(aws_client:aws_client()<%= if context.module_name == "aws_apigatewaymanagementapi" do %>, list() | binary(), list() | binary()<% end %><%= AWS.CodeGen.Types.required_function_parameter_types(action) %>) ->
    <%= AWS.CodeGen.Types.return_type(context.language, action)%>.
<%= action.function_name %>(Client<%= if context.module_name == "aws_apigatewaymanagementapi" do %>, ApiId, Stage<% end %><%= AWS.CodeGen.RestService.required_function_parameters(action) %>)
  when is_map(Client) ->
    <%= action.function_name %>(Client<%= if context.module_name == "aws_apigatewaymanagementapi" do %>, ApiId, Stage<% end %><%= AWS.CodeGen.RestService.required_function_parameters(action) %>, #{}, #{}).

-spec <%= action.function_name %>(aws_client:aws_client()<%= if context.module_name == "aws_apigatewaymanagementapi" do %>, list() | binary(), list() | binary()<% end %><%= AWS.CodeGen.Types.required_function_parameter_types(action) %>, map(), map()) ->
    <%= AWS.CodeGen.Types.return_type(context.language, action)%>.
<%= action.function_name %>(Client<%= if context.module_name == "aws_apigatewaymanagementapi" do %>, ApiId, Stage<% end %><%= AWS.CodeGen.RestService.required_function_parameters(action) %>, QueryMap, HeadersMap)
  when is_map(Client), is_map(QueryMap), is_map(HeadersMap) ->
    <%= action.function_name %>(Client<%= if context.module_name == "aws_apigatewaymanagementapi" do %>, ApiId, Stage<% end %><%= AWS.CodeGen.RestService.required_function_parameters(action) %>, QueryMap, HeadersMap, []).

-spec <%= action.function_name %>(aws_client:aws_client()<%= if context.module_name == "aws_apigatewaymanagementapi" do %>, list() | binary(), list() | binary()<% end %><%= AWS.CodeGen.Types.required_function_parameter_types(action) %>, map(), map(), proplists:proplist()) ->
    <%= AWS.CodeGen.Types.return_type(context.language, action)%>.
<%= action.function_name %>(Client<%= if context.module_name == "aws_apigatewaymanagementapi" do %>, ApiId, Stage<% end %><%= AWS.CodeGen.RestService.required_function_parameters(action) %>, QueryMap, HeadersMap, Options0)
  when is_map(Client), is_map(QueryMap), is_map(HeadersMap), is_list(Options0) ->
    Path = ["<%= if context.module_name == "aws_apigatewaymanagementapi" do %>/", Stage, "<% end %><%= AWS.CodeGen.RestService.Action.url_path(action) %>"],<%= if AWS.CodeGen.RestService.Context.s3_context?(context) do %>
<%= if !String.contains?("Bucket", AWS.CodeGen.RestService.required_function_parameters(action)) do %><% else %>    Bucket = undefined,<% end %><% end %>
    SuccessStatusCode = <%= inspect(action.success_status_code) %>,
    {SendBodyAsBinary, Options1} = proplists_take(send_body_as_binary, Options0, <%= action.send_body_as_binary? %>),
    {ReceiveBodyAsBinary, Options2} = proplists_take(receive_body_as_binary, Options1, <%= action.receive_body_as_binary? %>),
    Options = [{send_body_as_binary, SendBodyAsBinary},
               {receive_body_as_binary, ReceiveBodyAsBinary}
               | Options2],
<%= if length(action.request_header_parameters) > 0 do %>
    Headers0 =
      [<%= for parameter <- Enum.drop(action.request_header_parameters, -1) do %>
        {<<"<%= parameter.location_name %>">>, <%= if parameter.required do %><%= parameter.code_name %><% else %>maps:get(<<"<%= parameter.location_name %>">>, HeadersMap, undefined)<% end %>},<% end %><%= for parameter <- Enum.slice action.request_header_parameters, -1..-1 do %>
        {<<"<%= parameter.location_name %>">>, <%= if parameter.required do %><%= parameter.code_name %><% else %>maps:get(<<"<%= parameter.location_name %>">>, HeadersMap, undefined)<% end %>}
      <% end %>],
    Headers = [H || {_, V} = H <- Headers0, V =/= undefined],
<% else %>
    Headers = [],
<% end %><%= if length(action.query_parameters) > 0 do %>
    Query0_ =
      [<%= for parameter <- Enum.drop(action.query_parameters, -1) do %>
        {<<"<%= parameter.location_name %>">>, <%= if parameter.required do %><%= parameter.code_name %><% else %>maps:get(<<"<%= parameter.location_name %>">>, QueryMap, undefined)<% end %>},<% end %><%= for parameter <- Enum.slice action.query_parameters, -1..-1 do %>
        {<<"<%= parameter.location_name %>">>, <%= if parameter.required do %><%= parameter.code_name %><% else %>maps:get(<<"<%= parameter.location_name %>">>, QueryMap, undefined)<% end %>}
      <% end %>],
    Query_ = [H || {_, V} = H <- Query0_, V =/= undefined],
<% else %>
    Query_ = [],
<% end %><%= if length(action.response_header_parameters) > 0 do %>
    case request(Client<%= if context.module_name == "aws_apigatewaymanagementapi" do %>#{api_id => ApiId}<% else %><% end %>, get, Path, Query_, Headers, undefined, Options, SuccessStatusCode<%= if AWS.CodeGen.RestService.Context.s3_context?(context) do %>, Bucket<% end %>) of
      {ok, Body0, {_, ResponseHeaders, _} = Response} ->
        ResponseHeadersParams =
          [<%= for parameter <- Enum.drop action.response_header_parameters, -1 do %>
            {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>},<% end %><%= for parameter <- Enum.slice action.response_header_parameters, -1..-1 do %>
            {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>}
          <% end %>],
        FoldFun = fun({Name_, Key_}, Acc_) ->
                      case lists:keyfind(Name_, 1, ResponseHeaders) of
                        false -> Acc_;
                        {_, Value_} -> Acc_#{Key_ => Value_}
                      end
                  end,
        Body = lists:foldl(FoldFun, Body0, ResponseHeadersParams),
        {ok, Body, Response};
      Result ->
        Result
    end.<% else %>
    request(Client<%= if context.module_name == "aws_apigatewaymanagementapi" do %>#{api_id => ApiId}<% else %><% end %>, get, Path, Query_, Headers, undefined, Options, SuccessStatusCode<%= if AWS.CodeGen.RestService.Context.s3_context?(context) do %>, Bucket<% end %>).<% end %>
<% else %>
-spec <%= action.function_name %>(aws_client:aws_client()<%= if context.module_name == "aws_apigatewaymanagementapi" do %>, list() | binary(), list() | binary()<% end %><%= AWS.CodeGen.Types.required_function_parameter_types(action) %>, <%= AWS.CodeGen.Types.function_argument_type(context.language, action)%>) ->
    <%= AWS.CodeGen.Types.return_type(context.language, action)%>.
<%= action.function_name %>(Client<%= if context.module_name == "aws_apigatewaymanagementapi" do %>, ApiId, Stage<% end %><%= AWS.CodeGen.RestService.function_parameters(action) %>, Input) ->
    <%= action.function_name %>(Client<%= if context.module_name == "aws_apigatewaymanagementapi" do %>, ApiId, Stage<% end %><%= AWS.CodeGen.RestService.function_parameters(action) %>, Input, []).

-spec <%= action.function_name %>(aws_client:aws_client()<%= if context.module_name == "aws_apigatewaymanagementapi" do %>, list() | binary(), list() | binary()<% end %><%= AWS.CodeGen.Types.required_function_parameter_types(action) %>, <%= AWS.CodeGen.Types.function_argument_type(context.language, action)%>, proplists:proplist()) ->
    <%= AWS.CodeGen.Types.return_type(context.language, action)%>.
<%= action.function_name %>(Client<%= if context.module_name == "aws_apigatewaymanagementapi" do %>, ApiId, Stage<% end %><%= AWS.CodeGen.RestService.function_parameters(action) %>, Input0, Options0) ->
    Method = <%= AWS.CodeGen.RestService.Action.method(action) %>,
    Path = ["<%= if context.module_name == "aws_apigatewaymanagementapi" do %>/", Stage, "<% end %><%= AWS.CodeGen.RestService.Action.url_path(action) %>"],<%= if AWS.CodeGen.RestService.Context.s3_context?(context) do %>
<%= if !String.contains?("Bucket", AWS.CodeGen.RestService.required_function_parameters(action)) do %><% else %>    Bucket = undefined,<% end %><% end %>
    SuccessStatusCode = <%= inspect(action.success_status_code) %>,
    {SendBodyAsBinary, Options1} = proplists_take(send_body_as_binary, Options0, <%= action.send_body_as_binary? %>),
    {ReceiveBodyAsBinary, Options2} = proplists_take(receive_body_as_binary, Options1, <%= action.receive_body_as_binary? %>),
    Options = [{send_body_as_binary, SendBodyAsBinary},
               {receive_body_as_binary, ReceiveBodyAsBinary},
               {append_sha256_content_hash, <%= Enum.member?(["put_bucket_cors", "put_bucket_lifecycle", "put_bucket_tagging", "delete_objects"], action.function_name) %>}
               | Options2],
<%= if length(action.request_header_parameters) > 0 do %>
    HeadersMapping = [<%= for parameter <- Enum.drop(action.request_header_parameters, -1) do %>
                       {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>},<% end %><%= for parameter <- Enum.slice action.request_header_parameters, -1..-1 do %>
                       {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>}
                     <% end %>],
    {Headers, Input1} = aws_request:build_headers(HeadersMapping, Input0),
<% else %>
    Headers = [],
    Input1 = Input0,
<% end %><%= if length(action.request_headers_parameters) > 0 do %>
    CustomHeadersMapping = [<%= for parameter <- Enum.drop(action.request_headers_parameters, -1) do %>
                             {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>},<% end %><%= for parameter <- Enum.slice action.request_headers_parameters, -1..-1 do %>
                             {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>}
                          <% end %>],
    {CustomHeaders, Input2} = aws_request:build_custom_headers(CustomHeadersMapping, Input1),
<% else %>
    CustomHeaders = [],
    Input2 = Input1,
<% end %><%= if length(action.query_parameters) > 0 do %>
    QueryMapping = [<%= for parameter <- Enum.drop(action.query_parameters, -1) do %>
                     {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>},<% end %><%= for parameter <- Enum.slice action.query_parameters, -1..-1 do %>
                     {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>}
                   <% end %>],
    {Query_, Input} = aws_request:build_headers(QueryMapping, Input2),<% else %>
    Query_ = [],
    Input = Input2,
<% end %><%= if length(action.response_header_parameters) > 0 do %>
    case request(Client, Method, Path, Query_, CustomHeaders ++ Headers, Input, Options, SuccessStatusCode<%= if AWS.CodeGen.RestService.Context.s3_context?(context) do %>, Bucket<% end %>) of
      <%= if AWS.CodeGen.RestService.Action.method(action) == "head" do %>{ok, {_, ResponseHeaders} = Response} ->
        Body0 = #{},<% else %>{ok, Body0, {_, ResponseHeaders, _} = Response} -><% end %>
        ResponseHeadersParams =
          [<%= for parameter <- Enum.drop action.response_header_parameters, -1 do %>
            {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>},<% end %><%= for parameter <- Enum.slice action.response_header_parameters, -1..-1 do %>
            {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>}
          <% end %>],
        FoldFun = fun({Name_, Key_}, Acc_) ->
                      case lists:keyfind(Name_, 1, ResponseHeaders) of
                        false -> Acc_;
                        {_, Value_} -> Acc_#{Key_ => Value_}
                      end
                  end,
        Body = lists:foldl(FoldFun, Body0, ResponseHeadersParams),
        {ok, Body, Response};
      Result ->
        Result
    end.<% else %>
    request(Client<%= if context.module_name == "aws_apigatewaymanagementapi" do %>#{api_id => ApiId}<% else %><% end %>, Method, Path, Query_, CustomHeaders ++ Headers, Input, Options, SuccessStatusCode<%= if AWS.CodeGen.RestService.Context.s3_context?(context) do %>, Bucket<% end %>).<% end %>
<% end %><% end %>
%%====================================================================
%% Internal functions
%%====================================================================

-spec proplists_take(any(), proplists:proplist(), any()) -> {any(), proplists:proplist()}.
proplists_take(Key, Proplist, Default) ->
  Value = proplists:get_value(Key, Proplist, Default),
  {Value, proplists:delete(Key, Proplist)}.

-spec request(aws_client:aws_client(), atom(), iolist(), list(),
              list(), map() | undefined, list(), pos_integer() | undefined<%= if AWS.CodeGen.RestService.Context.s3_context?(context) do %>, binary() | undefined<% end %>) ->
    {ok, {integer(), list()}} |
    {ok, Result, {integer(), list(), hackney:client()}} |
    {error, Error, {integer(), list(), hackney:client()}} |
    {error, term()} when
    Result :: map(),
    Error :: map().
<%= if AWS.CodeGen.RestService.Context.s3_context?(context) do %>request(Client, Method, Path, Query, Headers0, Input, Options, SuccessStatusCode, Bucket0) ->
  Bucket = case Bucket0 of
             undefined -> undefined;
             _ -> iolist_to_binary(Bucket0)
           end,
  RequestFun = fun() -> do_request(Client, Method, Path, Query, Headers0, Input, Options, SuccessStatusCode, Bucket) end,<% else %>request(Client, Method, Path, Query, Headers0, Input, Options, SuccessStatusCode) ->
  RequestFun = fun() -> do_request(Client, Method, Path, Query, Headers0, Input, Options, SuccessStatusCode) end,<% end %>
  aws_request:request(RequestFun, Options).

do_request(Client, Method, Path, Query, Headers0, Input, Options, SuccessStatusCode<%= if AWS.CodeGen.RestService.Context.s3_context?(context) do %>, Bucket<% end %>) ->
    Client1 = Client#{service => <<"<%= context.signing_name %>">><%= if context.is_global do %>,
                      region => <<"<%= context.credential_scope %>">><% end %>},
    <%= if context.endpoint_prefix == "s3-control" do %>AccountId = proplists:get_value(<<"x-amz-account-id">>, Headers0),
    Host = build_host(AccountId, <<"<%= context.endpoint_prefix %>">>, Client1),<% else %><%= if AWS.CodeGen.RestService.Context.s3_context?(context) do %>Host = build_host(<<"<%= context.endpoint_prefix %>">>, Client1, Bucket),<%else %>Host = build_host(<<"<%= context.endpoint_prefix %>">>, Client1),<% end %><% end %>
    URL0 = build_url(Host, Path, Client1<%= if AWS.CodeGen.RestService.Context.s3_context?(context) do %>, Bucket<% end %>),
    URL = aws_request:add_query(URL0, Query),
    AdditionalHeaders1 = [ {<<"Host">>, Host}
                         , {<<"Content-Type">>, <<"<%= context.content_type %>">>}
                         ],
    Payload =
      case proplists:get_value(send_body_as_binary, Options) of
        true ->
          maps:get(<<"Body">>, Input, <<"">>);
        false ->
          encode_payload(Input)
      end,
    AdditionalHeaders = case proplists:get_value(append_sha256_content_hash, Options, false) of
                          true ->
                            add_checksum_hash_header(AdditionalHeaders1, Payload);
                          false ->
                            AdditionalHeaders1
                        end,
    Headers1 = aws_request:add_headers(AdditionalHeaders, Headers0),

    MethodBin = aws_request:method_to_binary(Method),
    SignedHeaders = aws_request:sign_request(Client1, MethodBin, URL, Headers1, Payload<%= if context.module_name == "aws_apigatewaymanagementapi" do %>, [{uri_encode_path, true}]<% else %><% end %>),
    Response = hackney:request(Method, URL, SignedHeaders, Payload, Options),
    DecodeBody = not proplists:get_value(receive_body_as_binary, Options),
    handle_response(Response, SuccessStatusCode, DecodeBody).

add_checksum_hash_header(Headers, Body) ->
  [ {<<"X-Amz-CheckSum-SHA256">>, base64:encode(crypto:hash(sha256, Body))}
  | Headers
  ].

handle_response({ok, StatusCode, ResponseHeaders}, SuccessStatusCode, _DecodeBody)
  when StatusCode =:= 200;
       StatusCode =:= 202;
       StatusCode =:= 204;
       StatusCode =:= 206;
       StatusCode =:= SuccessStatusCode ->
    {ok, {StatusCode, ResponseHeaders}};
handle_response({ok, StatusCode, ResponseHeaders}, _, _DecodeBody) ->
    {error, {StatusCode, ResponseHeaders}};
handle_response({ok, StatusCode, ResponseHeaders, Client}, SuccessStatusCode, DecodeBody)
  when StatusCode =:= 200;
       StatusCode =:= 202;
       StatusCode =:= 204;
       StatusCode =:= 206;
       StatusCode =:= SuccessStatusCode ->
    case hackney:body(Client) of
        {ok, <<>>} when StatusCode =:= 200;
                        StatusCode =:= SuccessStatusCode ->
            {ok, #{}, {StatusCode, ResponseHeaders, Client}};
        {ok, Body} ->
            Result = case DecodeBody of
                       true ->
                         try
                           <%= context.decode %>
                         catch
                           Error:Reason:Stack ->
                             erlang:raise(error, {body_decode_failed, Error, Reason, StatusCode, Body}, Stack)
                         end;
                       false -> #{<<"Body">> => Body}
                     end,
            {ok, Result, {StatusCode, ResponseHeaders, Client}}
    end;
handle_response({ok, StatusCode, _ResponseHeaders, _Client}, _, _DecodeBody)
  when StatusCode =:= 503 ->
  %% Retriable error if retries are enabled
  {error, service_unavailable};
handle_response({ok, StatusCode, ResponseHeaders, Client}, _, _DecodeBody) ->
    {ok, Body} = hackney:body(Client),
    try
      DecodedError = <%= context.decode %>,
      {error, DecodedError, {StatusCode, ResponseHeaders, Client}}
    catch
      Error:Reason:Stack ->
        erlang:raise(error, {body_decode_failed, Error, Reason, StatusCode, Body}, Stack)
    end;
handle_response({error, Reason}, _, _DecodeBody) ->
  {error, Reason}.
<%= if context.module_name == "aws_apigatewaymanagementapi" do %>
build_host(_EndpointPrefix, #{region := <<"local">>, endpoint := Endpoint}) ->
    Endpoint;
build_host(_EndpointPrefix, #{region := <<"local">>}) ->
    <<"localhost">>;
build_host(EndpointPrefix, #{api_id := ApiId, region := Region, endpoint := Endpoint}) ->
    aws_util:binary_join([ApiId, EndpointPrefix, Region, Endpoint], <<".">>).<% else %><%= if context.endpoint_prefix == "s3-control" do %>
build_host(_AccountId, _EndpointPrefix, #{region := <<"local">>, endpoint := Endpoint}) ->
    Endpoint;
build_host(_AccountId, _EndpointPrefix, #{region := <<"local">>}) ->
    <<"localhost">>;
build_host(undefined, _EndpointPrefix, _Client) ->
    error(missing_account_id);
build_host(AccountId, EndpointPrefix, #{region := Region, endpoint := Endpoint}) ->
    aws_util:binary_join([AccountId, EndpointPrefix, Region, Endpoint],
                         <<".">>).<% else %>
<%= if context.endpoint_prefix == "s3" do %><%= if context.is_global do %>
build_host(EndpointPrefix, #{endpoint := Endpoint}, undefined) ->
    aws_util:binary_join([EndpointPrefix, Endpoint], <<".">>);
build_host(EndpointPrefix, #{endpoint := Endpoint}, Bucket) ->
    aws_util:binary_join([Bucket, EndpointPrefix, Endpoint], <<".">>).<% else %>
build_host(_EndpointPrefix, #{region := <<"local">>, endpoint := Endpoint}, undefined) ->
    Endpoint;
build_host(_EndpointPrefix, #{region := <<"local">>, endpoint := Endpoint}, _Bucket) ->
    <<Endpoint/binary>>;
build_host(_EndpointPrefix, #{region := <<"local">>}, undefined) ->
    "localhost";
build_host(_EndpointPrefix, #{region := <<"local">>}, _Bucket) ->
    <<"localhost">>;<%= if context.is_global do %>
build_host(EndpointPrefix, #{endpoint := Endpoint}, undefined) ->
    aws_util:binary_join([EndpointPrefix, Endpoint], <<".">>);
build_host(EndpointPrefix, #{endpoint := Endpoint}, Bucket) ->
    aws_util:binary_join([Bucket, EndpointPrefix, Endpoint], <<".">>).<% else %>
build_host(EndpointPrefix, #{region := Region, endpoint := Endpoint}, undefined) ->
    aws_util:binary_join([EndpointPrefix, Region, Endpoint], <<".">>);
build_host(EndpointPrefix, #{region := Region, endpoint := Endpoint}, Bucket) ->
    aws_util:binary_join([Bucket, EndpointPrefix, Region, Endpoint], <<".">>).<% end %><% end %><% else %>build_host(_EndpointPrefix, #{region := <<"local">>, endpoint := Endpoint}) ->
    Endpoint;
build_host(_EndpointPrefix, #{region := <<"local">>}) ->
    <<"localhost">>;<%= if context.is_global do %>
build_host(EndpointPrefix, #{endpoint := Endpoint}) ->
    aws_util:binary_join([EndpointPrefix, Endpoint], <<".">>).<% else %>
build_host(EndpointPrefix, #{region := Region, endpoint := Endpoint}) ->
    aws_util:binary_join([EndpointPrefix, Region, Endpoint], <<".">>).<% end %><% end %><% end %><% end %>

<%= if AWS.CodeGen.RestService.Context.s3_context?(context) do %>build_url(Host0, Path0, Client, Bucket) ->
    Proto = aws_client:proto(Client),
    %% Mocks are notoriously bad with host-style requests, just skip it and use path-style for anything local
    %% At some points once the mocks catch up, we should remove this ugly hack...
    Host1 = erlang:iolist_to_binary(Host0),
    IsLocalHost = aws_client:region(Client) =:= <<"local">>,
    Path = case Bucket of
              _ when not IsLocalHost andalso Bucket =/= undefined ->
                erlang:iolist_to_binary(binary:replace(iolist_to_binary(Path0), [Bucket, <<Bucket/binary, "/">>], <<"">>, [global]));
              _ ->
                erlang:iolist_to_binary(Path0)
            end,
    Host = case Bucket of
             _ when not IsLocalHost andalso Bucket =/= undefined ->
               erlang:iolist_to_binary(string:replace(Host1, <<Bucket/binary, ".">>, <<"">>, all));
             _ ->
              Host1
           end,
    Port = aws_client:port(Client),
    aws_util:binary_join([Proto, <<"://">>, Host, <<":">>, Port, Path], <<"">>).<% else %>build_url(Host, Path0, Client) ->
    Proto = aws_client:proto(Client),
    Path = erlang:iolist_to_binary(Path0),
    Port = aws_client:port(Client),
    aws_util:binary_join([Proto, <<"://">>, Host, <<":">>, Port, Path], <<"">>).<% end %>

-spec encode_payload(undefined | map()) -> binary().
encode_payload(undefined) ->
  <<>>;
encode_payload(Input) ->
  <%= context.encode %>.
