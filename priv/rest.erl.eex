%% WARNING: DO NOT EDIT, AUTO-GENERATED CODE!
%% See https://github.com/aws-beam/aws-codegen for more details.

<%= if context.docstring != "%% @doc" do %><%= context.docstring %><% end %>
-module(<%= context.module_name %>).

-export([<%= Enum.map(context.actions, fn(action) -> if action.method == "GET" do ["#{action.function_name}/#{action.arity - 3}"] else [] end ++ ["#{action.function_name}/#{action.arity - 1}", "#{action.function_name}/#{action.arity}"] end) |> List.flatten |> Enum.join(",\n         ") %>]).

-include_lib("hackney/include/hackney_lib.hrl").

%%====================================================================
%% API
%%====================================================================
<%= for action <- context.actions do %>
<%= action.docstring %><%= if action.method == "GET" do %>
<%= action.function_name %>(Client<%= AWS.CodeGen.RestService.required_function_parameters(action) %>)
  when is_map(Client) ->
    <%= action.function_name %>(Client<%= AWS.CodeGen.RestService.required_function_parameters(action) %>, #{}, #{}).

<%= action.function_name %>(Client<%= AWS.CodeGen.RestService.required_function_parameters(action) %>, QueryMap, HeadersMap)
  when is_map(Client), is_map(QueryMap), is_map(HeadersMap) ->
    <%= action.function_name %>(Client<%= AWS.CodeGen.RestService.required_function_parameters(action) %>, QueryMap, HeadersMap, []).

<%= action.function_name %>(Client<%= AWS.CodeGen.RestService.required_function_parameters(action) %>, QueryMap, HeadersMap, Options0)
  when is_map(Client), is_map(QueryMap), is_map(HeadersMap), is_list(Options0) ->
    Path = ["<%= AWS.CodeGen.RestService.Action.url_path(action) %>"],<%= if AWS.CodeGen.RestService.Context.s3_context?(context) do %>
<%= if "Bucket" in Enum.map(action.url_parameters, & &1.code_name) do %><% else %>    Bucket = undefined,<% end %><% end %>
    SuccessStatusCode = <%= if is_nil(action.success_status_code), do: "undefined", else: inspect(action.success_status_code) %>,
    Options = [{send_body_as_binary, <%= action.send_body_as_binary? %>},
               {receive_body_as_binary, <%= action.receive_body_as_binary? %>}
               | Options0],
<%= if length(action.request_header_parameters) > 0 do %>
    Headers0 =
      [<%= for parameter <- Enum.drop(action.request_header_parameters, -1) do %>
        {<<"<%= parameter.location_name %>">>, <%= if parameter.required do %><%= parameter.code_name %><% else %>maps:get(<<"<%= parameter.location_name %>">>, HeadersMap, undefined)<% end %>},<% end %><%= for parameter <- Enum.slice action.request_header_parameters, -1..-1 do %>
        {<<"<%= parameter.location_name %>">>, <%= if parameter.required do %><%= parameter.code_name %><% else %>maps:get(<<"<%= parameter.location_name %>">>, HeadersMap, undefined)<% end %>}
      <% end %>],
    Headers = [H || {_, V} = H <- Headers0, V =/= undefined],
<% else %>
    Headers = [],
<% end %><%= if length(action.query_parameters) > 0 do %>
    Query0_ =
      [<%= for parameter <- Enum.drop(action.query_parameters, -1) do %>
        {<<"<%= parameter.location_name %>">>, <%= if parameter.required do %><%= parameter.code_name %><% else %>maps:get(<<"<%= parameter.location_name %>">>, QueryMap, undefined)<% end %>},<% end %><%= for parameter <- Enum.slice action.query_parameters, -1..-1 do %>
        {<<"<%= parameter.location_name %>">>, <%= if parameter.required do %><%= parameter.code_name %><% else %>maps:get(<<"<%= parameter.location_name %>">>, QueryMap, undefined)<% end %>}
      <% end %>],
    Query_ = [H || {_, V} = H <- Query0_, V =/= undefined],
<% else %>
    Query_ = [],
<% end %><%= if length(action.response_header_parameters) > 0 do %>
    case request(Client, get, Path, Query_, Headers, undefined, Options, SuccessStatusCode<%= if AWS.CodeGen.RestService.Context.s3_context?(context) do %>, Bucket<% end %>) of
      {ok, Body0, {_, ResponseHeaders, _} = Response} ->
        ResponseHeadersParams =
          [<%= for parameter <- Enum.drop action.response_header_parameters, -1 do %>
            {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>},<% end %><%= for parameter <- Enum.slice action.response_header_parameters, -1..-1 do %>
            {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>}
          <% end %>],
        FoldFun = fun({Name_, Key_}, Acc_) ->
                      case lists:keyfind(Name_, 1, ResponseHeaders) of
                        false -> Acc_;
                        {_, Value_} -> Acc_#{Key_ => Value_}
                      end
                  end,
        Body = lists:foldl(FoldFun, Body0, ResponseHeadersParams),
        {ok, Body, Response};
      Result ->
        Result
    end.<% else %>
    request(Client, get, Path, Query_, Headers, undefined, Options, SuccessStatusCode<%= if AWS.CodeGen.RestService.Context.s3_context?(context) do %>, Bucket<% end %>).<% end %>
<% else %>
<%= action.function_name %>(Client<%= AWS.CodeGen.RestService.function_parameters(action) %>, Input) ->
    <%= action.function_name %>(Client<%= AWS.CodeGen.RestService.function_parameters(action) %>, Input, []).
<%= action.function_name %>(Client<%= AWS.CodeGen.RestService.function_parameters(action) %>, Input0, Options0) ->
    Method = <%= AWS.CodeGen.RestService.Action.method(action) %>,
    Path = ["<%= AWS.CodeGen.RestService.Action.url_path(action) %>"],<%= if AWS.CodeGen.RestService.Context.s3_context?(context) do %>
<%= if "Bucket" in Enum.map(action.url_parameters, & &1.code_name) do %><% else %>    Bucket = undefined,<% end %><% end %>
    SuccessStatusCode = <%= if is_nil(action.success_status_code), do: "undefined", else: inspect(action.success_status_code) %>,
    Options = [{send_body_as_binary, <%= action.send_body_as_binary? %>},
               {receive_body_as_binary, <%= action.receive_body_as_binary? %>}
               | Options0],

<%= if length(action.request_header_parameters) > 0 do %>
    HeadersMapping = [<%= for parameter <- Enum.drop(action.request_header_parameters, -1) do %>
                       {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>},<% end %><%= for parameter <- Enum.slice action.request_header_parameters, -1..-1 do %>
                       {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>}
                     <% end %>],
    {Headers, Input1} = aws_request:build_headers(HeadersMapping, Input0),
<% else %>
    Headers = [],
    Input1 = Input0,
<% end %><%= if length(action.request_headers_parameters) > 0 do %>
    CustomHeadersMapping = [<%= for parameter <- Enum.drop(action.request_headers_parameters, -1) do %>
                             {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>},<% end %><%= for parameter <- Enum.slice action.request_headers_parameters, -1..-1 do %>
                             {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>}
                          <% end %>],
    {CustomHeaders, Input2} = aws_request:build_custom_headers(CustomHeadersMapping, Input1),
<% else %>
    CustomHeaders = [],
    Input2 = Input1,
<% end %><%= if length(action.query_parameters) > 0 do %>
    QueryMapping = [<%= for parameter <- Enum.drop(action.query_parameters, -1) do %>
                     {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>},<% end %><%= for parameter <- Enum.slice action.query_parameters, -1..-1 do %>
                     {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>}
                   <% end %>],
    {Query_, Input} = aws_request:build_headers(QueryMapping, Input2),<% else %>
    Query_ = [],
    Input = Input2,
<% end %><%= if length(action.response_header_parameters) > 0 do %>
    case request(Client, Method, Path, Query_, CustomHeaders ++ Headers, Input, Options, SuccessStatusCode<%= if AWS.CodeGen.RestService.Context.s3_context?(context) do %>, Bucket<% end %>) of
      <%= if AWS.CodeGen.RestService.Action.method(action) == "head" do %>{ok, {_, ResponseHeaders} = Response} ->
        Body0 = #{},<% else %>{ok, Body0, {_, ResponseHeaders, _} = Response} -><% end %>
        ResponseHeadersParams =
          [<%= for parameter <- Enum.drop action.response_header_parameters, -1 do %>
            {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>},<% end %><%= for parameter <- Enum.slice action.response_header_parameters, -1..-1 do %>
            {<<"<%= parameter.location_name %>">>, <<"<%= parameter.name %>">>}
          <% end %>],
        FoldFun = fun({Name_, Key_}, Acc_) ->
                      case lists:keyfind(Name_, 1, ResponseHeaders) of
                        false -> Acc_;
                        {_, Value_} -> Acc_#{Key_ => Value_}
                      end
                  end,
        Body = lists:foldl(FoldFun, Body0, ResponseHeadersParams),
        {ok, Body, Response};
      Result ->
        Result
    end.<% else %>
    request(Client, Method, Path, Query_, CustomHeaders ++ Headers, Input, Options, SuccessStatusCode<%= if AWS.CodeGen.RestService.Context.s3_context?(context) do %>, Bucket<% end %>).<% end %>
<% end %><% end %>
%%====================================================================
%% Internal functions
%%====================================================================

-spec request(aws_client:aws_client(), atom(), iolist(), list(),
              list(), map() | undefined, list(), pos_integer() | undefined<%= if AWS.CodeGen.RestService.Context.s3_context?(context) do %>, binary() | undefined<% end %>) ->
    {ok, {integer(), list()}} |
    {ok, Result, {integer(), list(), hackney:client()}} |
    {error, Error, {integer(), list(), hackney:client()}} |
    {error, term()} when
    Result :: map(),
    Error :: map().
<%= if AWS.CodeGen.RestService.Context.s3_context?(context) do %>request(Client, Method, Path, Query, Headers0, Input, Options, SuccessStatusCode, Bucket0) ->
  Bucket = case Bucket0 of
             undefined -> undefined;
             _ -> iolist_to_binary(Bucket0)
           end,
  RequestFun = fun() -> do_request(Client, Method, Path, Query, Headers0, Input, Options, SuccessStatusCode, Bucket) end,<% else %>request(Client, Method, Path, Query, Headers0, Input, Options, SuccessStatusCode) ->
  RequestFun = fun() -> do_request(Client, Method, Path, Query, Headers0, Input, Options, SuccessStatusCode) end,<% end %>
  aws_request:request(RequestFun, Options).

do_request(Client, Method, Path, Query, Headers0, Input, Options, SuccessStatusCode<%= if AWS.CodeGen.RestService.Context.s3_context?(context) do %>, Bucket<% end %>) ->
    Client1 = Client#{service => <<"<%= context.signing_name %>">><%= if context.is_global do %>,
                      region => <<"<%= context.credential_scope %>">><% end %>},
    <%= if context.endpoint_prefix == "s3-control" do %>AccountId = proplists:get_value(<<"x-amz-account-id">>, Headers0),
    Host = build_host(AccountId, <<"<%= context.endpoint_prefix %>">>, Client1),<% else %><%= if AWS.CodeGen.RestService.Context.s3_context?(context) do %>Host = build_host(<<"<%= context.endpoint_prefix %>">>, Client1, Bucket),<%else %>Host = build_host(<<"<%= context.endpoint_prefix %>">>, Client1),<% end %><% end %>
    URL0 = build_url(Host, Path, Client1<%= if AWS.CodeGen.RestService.Context.s3_context?(context) do %>, Bucket<% end %>),
    URL = aws_request:add_query(URL0, Query),
    AdditionalHeaders = [ {<<"Host">>, Host}
                        , {<<"Content-Type">>, <<"<%= context.content_type %>">>}
                        ],
    Headers1 = aws_request:add_headers(AdditionalHeaders, Headers0),

    Payload =
      case proplists:get_value(send_body_as_binary, Options) of
        true ->
          maps:get(<<"Body">>, Input, <<"">>);
        false ->
          encode_payload(Input)
      end,

    MethodBin = aws_request:method_to_binary(Method),
    SignedHeaders = aws_request:sign_request(Client1, MethodBin, URL, Headers1, Payload),
    Response = hackney:request(Method, URL, SignedHeaders, Payload, Options),
    DecodeBody = not proplists:get_value(receive_body_as_binary, Options),
    handle_response(Response, SuccessStatusCode, DecodeBody).

handle_response({ok, StatusCode, ResponseHeaders}, SuccessStatusCode, _DecodeBody)
  when StatusCode =:= 200;
       StatusCode =:= 202;
       StatusCode =:= 204;
       StatusCode =:= 206;
       StatusCode =:= SuccessStatusCode ->
    {ok, {StatusCode, ResponseHeaders}};
handle_response({ok, StatusCode, ResponseHeaders}, _, _DecodeBody) ->
    {error, {StatusCode, ResponseHeaders}};
handle_response({ok, StatusCode, ResponseHeaders, Client}, SuccessStatusCode, DecodeBody)
  when StatusCode =:= 200;
       StatusCode =:= 202;
       StatusCode =:= 204;
       StatusCode =:= 206;
       StatusCode =:= SuccessStatusCode ->
    case hackney:body(Client) of
        {ok, <<>>} when StatusCode =:= 200;
                        StatusCode =:= SuccessStatusCode ->
            {ok, #{}, {StatusCode, ResponseHeaders, Client}};
        {ok, Body} ->
            Result = case DecodeBody of
                       true -> <%= context.decode %>;
                       false -> #{<<"Body">> => Body}
                     end,
            {ok, Result, {StatusCode, ResponseHeaders, Client}}
    end;
handle_response({ok, StatusCode, ResponseHeaders, Client}, _, _DecodeBody) ->
    {ok, Body} = hackney:body(Client),
    Error = <%= context.decode %>,
    {error, Error, {StatusCode, ResponseHeaders, Client}};
handle_response({error, Reason}, _, _DecodeBody) ->
  {error, Reason}.
<%= if context.endpoint_prefix == "s3-control" do %>
build_host(_AccountId, _EndpointPrefix, #{region := <<"local">>, endpoint := Endpoint}) ->
    Endpoint;
build_host(_AccountId, _EndpointPrefix, #{region := <<"local">>}) ->
    <<"localhost">>;
build_host(undefined, _EndpointPrefix, _Client) ->
    error(missing_account_id);
build_host(AccountId, EndpointPrefix, #{region := Region, endpoint := Endpoint}) ->
    aws_util:binary_join([AccountId, EndpointPrefix, Region, Endpoint],
                         <<".">>).<% else %>
<%= if context.endpoint_prefix == "s3" do %><%= if context.is_global do %>
build_host(EndpointPrefix, #{endpoint := Endpoint}, undefined) ->
    aws_util:binary_join([EndpointPrefix, Endpoint], <<".">>);
build_host(EndpointPrefix, #{endpoint := Endpoint}, Bucket) ->
    aws_util:binary_join([Bucket, EndpointPrefix, Endpoint], <<".">>).<% else %>
build_host(_EndpointPrefix, #{region := <<"local">>, endpoint := Endpoint}, undefined) ->
    Endpoint;
build_host(_EndpointPrefix, #{region := <<"local">>, endpoint := Endpoint}, _Bucket) ->
    <<Endpoint/binary>>;
build_host(_EndpointPrefix, #{region := <<"local">>}, undefined) ->
    "localhost";
build_host(_EndpointPrefix, #{region := <<"local">>}, _Bucket) ->
    <<"localhost">>;<%= if context.is_global do %>
build_host(EndpointPrefix, #{endpoint := Endpoint}, undefined) ->
    aws_util:binary_join([EndpointPrefix, Endpoint], <<".">>);
build_host(EndpointPrefix, #{endpoint := Endpoint}, Bucket) ->
    aws_util:binary_join([Bucket, EndpointPrefix, Endpoint], <<".">>).
<% else %>
build_host(EndpointPrefix, #{region := Region, endpoint := Endpoint}, undefined) ->
    aws_util:binary_join([EndpointPrefix, Region, Endpoint], <<".">>);
build_host(EndpointPrefix, #{region := Region, endpoint := Endpoint}, Bucket) ->
    aws_util:binary_join([Bucket, EndpointPrefix, Region, Endpoint], <<".">>).<% end %><% end %><% else %>build_host(_EndpointPrefix, #{region := <<"local">>, endpoint := Endpoint}) ->
    Endpoint;
build_host(_EndpointPrefix, #{region := <<"local">>}) ->
    <<"localhost">>;<%= if context.is_global do %>
build_host(EndpointPrefix, #{endpoint := Endpoint}) ->
    aws_util:binary_join([EndpointPrefix, Endpoint], <<".">>).<% else %>
build_host(EndpointPrefix, #{region := Region, endpoint := Endpoint}) ->
    aws_util:binary_join([EndpointPrefix, Region, Endpoint], <<".">>).<% end %><% end %><% end %>

<%= if AWS.CodeGen.RestService.Context.s3_context?(context) do %>build_url(Host0, Path0, Client, Bucket) ->
    Proto = maps:get(proto, Client),
    %% Mocks are notoriously bad with host-style requests, just skip it and use path-style for anything local
    %% At some points once the mocks catch up, we should remove this ugly hack...
    Host1 = erlang:iolist_to_binary(Host0),
    IsLocalHost = maps:get(region, Client) =:= <<"local">>,
    Path = case Bucket of
              _ when not IsLocalHost andalso Bucket =/= undefined ->
                erlang:iolist_to_binary(binary:replace(iolist_to_binary(Path0), [Bucket, <<Bucket/binary, "/">>], <<"">>, [global]));
              _ ->
                erlang:iolist_to_binary(Path0)
            end,
    Host = case Bucket of
             _ when not IsLocalHost andalso Bucket =/= undefined ->
               erlang:iolist_to_binary(string:replace(Host1, <<Bucket/binary, ".">>, <<"">>, all));
             _ ->
              Host1
           end,
    Port = maps:get(port, Client),
    aws_util:binary_join([Proto, <<"://">>, Host, <<":">>, Port, Path], <<"">>).<% else %>build_url(Host, Path0, Client) ->
    Proto = maps:get(proto, Client),
    Path = erlang:iolist_to_binary(Path0),
    Port = maps:get(port, Client),
    aws_util:binary_join([Proto, <<"://">>, Host, <<":">>, Port, Path], <<"">>).<% end %>

-spec encode_payload(undefined | map()) -> binary().
encode_payload(undefined) ->
  <<>>;
encode_payload(Input) ->
  <%= context.encode %>.
